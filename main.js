const formatNumber = (num) => num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
function openModal(user) {
    const oMain = document.querySelector("#main");
    const oModal = document.querySelector(".modal");

    if (!oMain || !oModal) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã main –∏–ª–∏ modal");
        return;
    }

    oModal.classList.add("opened");
    oMain.classList.add("closed");

    const modalBody = oModal.querySelector(".modalBody");
    if (!modalBody) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç .modalBody");
        return;
    }

    modalBody.innerHTML = `
        <div class="modalContent">
            <img src="${user.avatar}" alt="${user.username}'s avatar" class="userAvatar" style="max-height: 150px;">
            <h2>${user.username}</h2>
            <p><strong>–†–µ–∞–ª—å–Ω–æ–µ –∏–º—è:</strong> ${user.realName}</p>
            <p><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> ${user.age}</p>
            <p><strong>–ì–æ—Ä–æ–¥:</strong> ${user.location}</p>
            <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${user.description}</p>
            <p><strong>–Ø–∑—ã–∫–∏:</strong> ${user.languages.join(", ")}</p>
            <div class="topGames">
                <h3>–¢–æ–ø –∏–≥—Ä—ã:</h3>
                <ul>
                    ${user.topGames.map(game => `<li>${game.name} ‚Äî ${formatNumber(game.playtime)} —á–∞—Å–æ–≤</li>`).join("")}
                </ul>
            </div>
            <div class="schedule">
                <h3>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</h3>
                <p><strong>–ë—É–¥–Ω–∏:</strong> ${user.schedule.weekdays.join(", ")}</p>
                <p><strong>–í—ã—Ö–æ–¥–Ω—ã–µ:</strong> ${user.schedule.weekends.join(", ")}</p>
            </div>
            <button class="btn btn-primary like" title="–õ–∞–π–∫">–õ–∞–π–∫</button>
        </div>
    `;

    const closeButton = oModal.querySelector('.close-button');
    if (closeButton) {
        closeButton.addEventListener('click', closeModal);
    } else {
        console.error("–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –º–æ–¥–∞–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    const likeButton = modalBody.querySelector('.like');
    if (likeButton) {
        likeButton.addEventListener('click', () => {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!`);
            closeModal();
        });
    }
}

function closeModal() {
    const oMain = document.querySelector("#main");
    const oModal = document.querySelector(".modal");

    if (!oMain || !oModal) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã main –∏–ª–∏ modal –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏");
        return;
    }

    oModal.classList.remove("opened");
    oMain.classList.remove("closed");
}

document.addEventListener('DOMContentLoaded', async () => {
    const loggedInUser = localStorage.getItem('loggedInUser');

    if (!loggedInUser) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
        window.location.href = './login/emailLogin.html';
        return;
    }

    console.log("–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", loggedInUser);

    let db;
    try {
        const response = await fetch("./database.json");
        db = await response.json();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:", error);
        return;
    }

    const main = document.getElementById("main");
    if (!main) {
        console.error("–≠–ª–µ–º–µ–Ω—Ç —Å id='main' –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
    }

    const cleanUsername = (username) => username.replace(/#\d{4}$/, "");
    const userCards = [];

    const renderUser = (userId) => {
        const user = db.users.find(u => u.id === userId);
        if (!user) {
            console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        if (user.username === loggedInUser) {
            console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${loggedInUser}`);
            return;
        }

        const statusClass = user.status === "online" ? "status-online" :
                            user.status === "offline" ? "status-offline" : "status-away";
        const statusIcon = user.status === "online" ? "üü¢" :
                           user.status === "offline" ? "üî¥" : "üü°";

        const topGames = user.topGames?.length ? `
            <div class="section-title">üéÆ –¢–æ–ø –∏–≥—Ä—ã:</div>
            <ul class="game-list">
                ${user.topGames.slice(0, 3).map(game => `<li>${game.name} ‚Äî ${formatNumber(game.playtime)} —á–∞—Å–æ–≤</li>`).join("")}
            </ul>
        ` : "";

        const languages = user.languages?.length ? `<p>–Ø–∑—ã–∫–∏üó£ ${user.languages.join(", ")}</p>` : "";
        const location = user.location ? `<p>–ì–æ—Ä–æ–¥üìç ${user.location}</p>` : "";
        const voiceChat = user.voiceChat ? `<p>–í–æ–π—Å-—á–∞—Ç—ãüéô ${user.voiceChatPlatforms.join(", ")}</p>` : "";

        userCards.push({
            userId: user.id,
            avatar: user.avatar,
            username: cleanUsername(user.username),
            age: user.age,
            statusClass: statusClass,
            statusIcon: statusIcon,
            realName: user.realName,
            skillLevel: user.skillLevel,
            description: user.description,
            topGames: topGames,
            location: location,
            languages: languages,
            voiceChat: voiceChat
        });
    };

    const renderUserCards = () => {
        console.log("–†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", userCards);
        userCards.forEach(userCard => {
            main.insertAdjacentHTML("beforeend", `
                <div class="userCard" id="${userCard.userId}" data-user-id="${userCard.userId}">
                    <img src="${userCard.avatar}" alt="${userCard.username}'s avatar" class="userAvatar">
                    <p class="userName">${userCard.username}</p>
                    <p class="userAge aBitGray">–í–æ–∑—Ä–∞—Å—Ç: ${userCard.age}</p>
                    <div class="userLastLine">
                        <p class="${userCard.statusClass} aBitGray">${userCard.statusClass === 'status-online' ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω'}</p>
                        <button class="btn btn-primary like" title="–õ–∞–π–∫">–õ–∞–π–∫</button>
                    </div>
                </div>
            `);
        });
    };

    db.users.forEach(user => renderUser(user.id));
    renderUserCards();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
    document.addEventListener("click", (e) => {
        const card = e.target.closest(".userCard");
        const likeButton = e.target.closest(".like");

        if (likeButton) {
            console.log("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –õ–∞–π–∫");
            return;
        }

        if (card) {
            const userId = card.dataset.userId;
            const user = db.users.find(u => u.id === userId);
            if (user) {
                console.log(`–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è ${user.username}`);
                openModal(user);
            } else {
                console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ db`);
            }
        }
    });
});
